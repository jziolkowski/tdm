name: GitHub release

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
    paths-ignore:
      - '.github/**'
      - '**.md'

jobs:
  Binaries:
    runs-on: ${{ matrix.os }}
    outputs:
      version-tag: ${{ steps.version_tag.outputs.VERSION_TAG }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            arch: x86
          - os: windows-2019
            arch: x64
          - os: macos-13
            arch: x64

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          architecture: ${{ matrix.arch }}

      - name: Install PyInstaller
        run: pip install -r requirements_build.txt

      - name: Retrieve version tag
        id: version_tag
        shell: bash
        run: echo "VERSION_TAG=$(python -m setuptools_scm)" >> $GITHUB_OUTPUT

      - name: Build with PyInstaller
        run: pyinstaller --noconfirm --clean tdmgr.spec

      - name: Upload binaries artifact to workflow
        uses: actions/upload-artifact@v3
        with:
          name: tdmgr
          path: dist/*

  Draft-Release:
    runs-on: ubuntu-latest
    needs: Binaries
    env:
      VERSION_TAG: ${{ needs.Binaries.outputs.version-tag }}
    steps:
      - uses: actions/checkout@v3

      # Create a draft release
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          release_name: TDM ${{ env.VERSION_TAG }}
          draft: ${{ github.ref_name != 'refs/heads/develop'}}
          prerelease: ${{ github.ref_name == 'refs/heads/develop'}}


      - name: Download artifacts from build
        uses: actions/download-artifact@v3
        with:
          path: dist

      # Upload release assets: each file in `dist/` to the GitHub Release
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for asset in dist/tdmgr/*; do
            echo "Uploading asset: $asset"
            gh release upload ${{ env.VERSION_TAG }} "$asset" --clobber
          done
